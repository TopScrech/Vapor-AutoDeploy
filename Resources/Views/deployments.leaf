<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Deployments Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 dark:bg-gray-900">
    <div class="container mx-auto px-4 py-8">
        <div class="mb-6">
            <h1 class="text-2xl font-bold text-gray-800 dark:text-gray-100">Recent Deployments</h1>
        </div>

        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead class="bg-gray-50 dark:bg-gray-700">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">ID</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Status</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Started</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Duration</th>
                    </tr>
                </thead>
                <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                    #for(task in tasks):
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors" 
                        data-deployment-id="#(task.id)"
                        data-started-at="#(task.startedAtTimestamp)">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <a href="/admin/deployments/#(task.id)" class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 font-medium">#(task.id)</a>
                        </td>
                        <!-- ... rest of table cells ... -->
                    </tr>
                    #endfor
                </tbody>
            </table>
        </div>
    </div>

    <script>
        function initDeploymentMonitoring() {
            document.querySelectorAll('[data-deployment-id]').forEach(row => {
                const deploymentId = row.dataset.deploymentId;
                const durationElement = row.querySelector('.live-duration');
                const spinner = row.querySelector('svg');
                const startTimestamp = parseFloat(row.dataset.startedAt);

                // Immediate first update
                let lastDuration = 0;
                const updateDuration = () => {
                    const now = Date.now() / 1000;
                    lastDuration = (now - startTimestamp).toFixed(1);
                    durationElement.textContent = `${lastDuration}s`;
                };

                // Update duration every 100ms
                const updateInterval = setInterval(updateDuration, 100);
                updateDuration(); // Initial update

                // Check status every 5 seconds
                const statusCheckInterval = setInterval(() => {
                    fetch(`/admin/deployments/${deploymentId}`)
                        .then(response => {
                            if (!response.ok) throw new Error('Network error');
                            return response.json();
                        })
                        .then(deployment => {
                            if (deployment.finishedAt) {
                                clearInterval(updateInterval);
                                clearInterval(statusCheckInterval);
                                spinner?.remove();
                                const finalDuration = (
                                    new Date(deployment.finishedAt).getTime()/1000 - startTimestamp
                                ).toFixed(1);
                                durationElement.textContent = `${finalDuration}s`;
                                durationElement.classList.remove('live-duration');
                            }
                        })
                        .catch(error => console.error('Monitoring error:', error));
                }, 5000); // 5 seconds

                // Cleanup if row gets removed
                row.addEventListener('remove', () => {
                    clearInterval(updateInterval);
                    clearInterval(statusCheckInterval);
                });
            });
        }

        document.addEventListener('DOMContentLoaded', initDeploymentMonitoring);
    </script>
</body>
</html>
