<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Deployments Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 dark:bg-gray-900">
    <div class="container mx-auto px-2 sm:px-4 py-6">
        <div class="mb-4">
            <h1 class="text-xl sm:text-2xl font-bold text-gray-800 dark:text-gray-100">Recent Deployments</h1>
        </div>

        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead class="bg-gray-50 dark:bg-gray-700">
                    <tr>
                        <th class="px-4 py-3 sm:px-6 sm:py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Message</th>
                        <th class="hidden sm:table-cell px-4 py-3 sm:px-6 sm:py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">ID</th>
                        <th class="px-4 py-3 sm:px-6 sm:py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Status</th>
                        <th class="hidden sm:table-cell px-4 py-3 sm:px-6 sm:py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Started</th>
                        <th class="px-4 py-3 sm:px-6 sm:py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Duration</th>
                    </tr>
                </thead>
                <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                    #for(task in tasks):
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors" 
                        data-deployment-id="#(task.id)" 
                        data-started-at="#(task.startedAtTimestamp)"
                    >
                        <td class="px-4 py-3 sm:px-6 sm:py-4 max-w-[160px]">
                            <span class="block text-sm text-gray-600 dark:text-gray-300 truncate">#(task.message)</span>
                        </td>
                        
                        <td class="hidden sm:table-cell px-4 py-3 sm:px-6 sm:py-4">
                            <a href="/admin/deployments/#(task.id)" class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 font-medium text-sm">#(task.id)</a>
                        </td>
                        
                        <td class="px-4 py-3 sm:px-6 sm:py-4">
                            #if(task.status == "success"):
                                <span class="status-badge px-2 py-1 sm:px-3 rounded-full bg-green-100 text-green-800 dark:bg-green-800/30 dark:text-green-200 text-sm">Success</span>
                            #elseif(task.status == "failure"):
                                <span class="status-badge px-2 py-1 sm:px-3 rounded-full bg-red-100 text-red-800 dark:bg-red-800/30 dark:text-red-200 text-sm">Failed</span>
                            #else:
                                <span class="status-badge px-2 py-1 sm:px-3 rounded-full bg-blue-100 text-blue-800 dark:bg-blue-800/30 dark:text-blue-200 text-sm">#(task.status)</span>
                            #endif
                        </td>
                        
                        <td class="hidden sm:table-cell px-4 py-3 sm:px-6 sm:py-4">
                            <span class="block text-sm text-gray-600 dark:text-gray-300">#date(task.startedAt, "MMM d, yyyy")</span>
                            <span class="block text-gray-400 dark:text-gray-500 text-xs">#date(task.startedAt, "HH:mm:ss")</span>
                        </td>
                        
                        <td class="px-4 py-3 sm:px-6 sm:py-4">
                            #if(task.durationString):
                                <span class="font-mono text-sm text-gray-600 dark:text-gray-300">#(task.durationString)</span>
                            #else:
                                <div class="flex items-center text-gray-600 dark:text-gray-300">
                                    <svg class="animate-spin h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    <span class="live-duration font-mono text-sm">0.0s</span>
                                </div>
                            #endif
                        </td>
                    </tr>
                    #endfor
                </tbody>
            </table>
        </div>
    </div>



    <script>
        function getStatusBadge(status) {
            const classes = {
                success: 'bg-green-100 text-green-800 dark:bg-green-800/30 dark:text-green-200',
                failure: 'bg-red-100 text-red-800 dark:bg-red-800/30 dark:text-red-200',
                default: 'bg-blue-100 text-blue-800 dark:bg-blue-800/30 dark:text-blue-200'
            };
            
            const badgeClass = classes[status] || classes.default;
            const label = status === 'failure' ? 'Failed' :
                         status === 'success' ? 'Success' :
                         status;
            
            return `<span class="status-badge px-3 py-1 rounded-full ${badgeClass} text-sm">${label}</span>`;
        }

        function formatDateTime(isoString) {
            const date = new Date(isoString);
            return {
                date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
                time: date.toLocaleTimeString('en-US', { hour12: false })
            };
        }

        function createDeploymentRow(deployment) {
            const row = document.createElement('tr');
            row.className = 'hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors';
            row.dataset.deploymentId = deployment.id;
            row.dataset.startedAt = deployment.startedAtTimestamp;

            const datetime = formatDateTime(deployment.startedAt);
            const durationHtml = deployment.durationString ?
                `<span class="font-mono text-sm text-gray-600 dark:text-gray-300">${deployment.durationString}</span>` :
                `<div class="flex items-center text-gray-600 dark:text-gray-300">
                    <svg class="animate-spin h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span class="live-duration font-mono text-sm">0.0s</span>
                </div>`;

            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap">
                    <span class="block text-sm text-gray-600 dark:text-gray-300">${deployment.message}</span>
                </td>
                
                <td class="px-6 py-4 whitespace-nowrap">
                    <a href="/admin/deployments/${deployment.id}" class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 font-medium">${deployment.id}</a>
                </td>
                
                <td class="px-6 py-4 whitespace-nowrap">
                    ${getStatusBadge(deployment.status)}
                </td>
                
                <td class="px-6 py-4 whitespace-nowrap">
                    <span class="block text-sm text-gray-600 dark:text-gray-300">${datetime.date}</span>
                    <span class="block text-gray-400 dark:text-gray-500 text-xs">${datetime.time}</span>
                </td>
                
                <td class="px-6 py-4 whitespace-nowrap">
                    ${durationHtml}
                </td>
            `;

            return row;
        }

        function initDeploymentMonitoring() {
            const tbody = document.querySelector('tbody');
            const existingIds = new Set();

            // Track existing deployments
            document.querySelectorAll('[data-deployment-id]').forEach(row => {
                existingIds.add(row.dataset.deploymentId);
            });

            function monitorDeployment(row) {
                const deploymentId = row.dataset.deploymentId;
                const durationElement = row.querySelector('.live-duration');
                const spinner = row.querySelector('svg');
                const startTimestamp = parseFloat(row.dataset.startedAt);
                const statusCell = row.querySelector('td:nth-child(3)');

                // Skip if already finished or missing required elements
                if (!durationElement || isNaN(startTimestamp)) return;

                let lastDuration = 0;
                const updateDuration = () => {
                    const now = Date.now() / 1000;
                    lastDuration = (now - startTimestamp).toFixed(1);
                    durationElement.textContent = `${lastDuration}s`;
                };

                const updateInterval = setInterval(updateDuration, 100);
                updateDuration();

                const statusCheckInterval = setInterval(() => {
                    fetch(`/admin/deployments/${deploymentId}`)
                        .then(response => {
                            if (!response.ok) throw new Error('Network error');
                            return response.json();
                        })
                        .then(deployment => {
                            if (deployment.finishedAt) {
                                clearInterval(updateInterval);
                                clearInterval(statusCheckInterval);
                                
                                const durationCell = row.querySelector('td:nth-child(5)');
                                if (durationCell) {
                                    durationCell.innerHTML = `<span class="font-mono text-sm text-gray-600 dark:text-gray-300">${deployment.durationString}</span>`;
                                }
                                
                                if (statusCell) {
                                    statusCell.innerHTML = getStatusBadge(deployment.status);
                                }
                            }
                        })
                        .catch(error => console.error('Monitoring error:', error));
                }, 5000);

                row.addEventListener('remove', () => {
                    clearInterval(updateInterval);
                    clearInterval(statusCheckInterval);
                });
            }

            // Check for new deployments every 10 seconds
            setInterval(() => {
                fetch('/admin/deployments')
                    .then(response => response.json())
                    .then(deployments => {
                        deployments.forEach(deployment => {
                            if (!existingIds.has(deployment.id)) {
                                existingIds.add(deployment.id);
                                const newRow = createDeploymentRow(deployment);
                                tbody.insertBefore(newRow, tbody.firstChild);
                                
                                // Only start monitoring if deployment isn't finished
                                if (!deployment.finishedAt) {
                                    monitorDeployment(newRow);
                                }
                            }
                        });
                    })
                    .catch(error => console.error('Error checking for new deployments:', error));
            }, 5000);

            // Initialize monitoring for existing deployments
            document.querySelectorAll('[data-deployment-id]').forEach(monitorDeployment);
        }

        document.addEventListener('DOMContentLoaded', initDeploymentMonitoring);
        /**/
    </script>
</body>
</html>
